<HTML>
<HEAD>
<!-- #BeginEditable "doctitle" --> 
<TITLE>Dublin Core Metadata Initiative /</TITLE>
<!-- #EndEditable --> 
<SCRIPT SRC="file:///I%7C/PREPWWW/OCLC/RESEARCH/PROJECTS/javascript_level02.js" TYPE="TEXT/JAVASCRIPT"></SCRIPT>
<link rel="meta" href="grammar-20000807.htm.rdf">
</HEAD>
<BODY BGCOLOR="#FFFFE7" TEXT="#000000" ALINK="#FFFFFF" LINK="#990000" VLINK="#000066">
<DIV ALIGN="CENTER">
  <TABLE BORDER="0" WIDTH="86%" CELLSPACING="0" CELLPADDING="0" height="9493">
    <TR>
      <TD height="9500"><!-- #BeginLibraryItem "/Library/_top url date table.lbi" --><TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
<TR><TD HEIGHT="20" WIDTH="50%" ALIGN="LEFT" BGCOLOR="#000000"><!-- #BeginLibraryItem "/Library/url top.lbi" -->&nbsp;&nbsp;<FONT COLOR="#FFFFCC"><B>http://purl.org/dc</B></FONT><!-- #EndLibraryItem --></TD><TD HEIGHT="20" WIDTH="50%" ALIGN="RIGHT" BGCOLOR="#000000">&nbsp;
</TD></TR>
</TABLE><!-- #EndLibraryItem -->
<TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
<TR>
<TD HEIGHT="32" WIDTH="2%" BGCOLOR="#669999">&nbsp;</TD>
<TD HEIGHT="32" WIDTH="58%" BGCOLOR="#669999"><!-- #BeginLibraryItem "/Library/dcmi logo and link.lbi" --><A HREF="/oclc/research/projects/core/index.htm"><IMG SRC="../../images/dcmi/dcmi_22.gif" WIDTH="460" HEIGHT="32" ALT="Dublin Core Metadata Initiative" BORDER="0"></A><!-- #EndLibraryItem --></TD>
<TD WIDTH="38%" ROWSPAN="2" VALIGN="TOP" BGCOLOR="#669999">
<TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="8">
<TR>
<TD ALIGN="RIGHT" VALIGN="MIDDLE"><!-- #BeginLibraryItem "/Library/pop-up menu content [level 2].lbi" --><FONT SIZE="2">
<FORM NAME="menu">
<SELECT NAME="CHOICES" onChange="gotosite(this.options[this.selectedIndex].value)">
<OPTION selected>Dublin Core topics:</OPTION>
<OPTION VALUE="../../index.htm">Home</OPTION>
<OPTION VALUE="../../search/index.htm">Search</OPTION>
<OPTION VALUE="../../sitemap/index.htm">Site Map</OPTION>
<OPTION VALUE="../../news/index.htm">What's New</OPTION>
<OPTION VALUE="../../feedback/index.htm">Feedback</OPTION>
<OPTION VALUE="../../about/element_set.htm">Dublin Core Element Set</OPTION>
<OPTION VALUE="../../about/index.htm">About the Dublin Core</OPTION>
<OPTION VALUE="../../news/index.htm">News and Publications</OPTION>
<OPTION VALUE="../../documents/index.htm">Documents</OPTION>
<OPTION VALUE="../../education/index.htm">Education</OPTION>
<OPTION VALUE="../../projects/index.htm">Projects</OPTION>
<OPTION VALUE="../../schemas/index.htm">Schemas</OPTION>
<OPTION VALUE="../../tools/index.htm">Tools</OPTION>
<OPTION VALUE="../../groups/index.htm">Working Groups</OPTION>
<OPTION VALUE="../../about/workshop.htm">Workshops</OPTION>
</SELECT>
</FORM>
</FONT><!-- #EndLibraryItem --></TD>
</TR>
</TABLE>
</TD>
<TD HEIGHT="32" WIDTH="2%" BGCOLOR="#669999">&nbsp;</TD>
</TR>
<TR>
<TD HEIGHT="20" WIDTH="2%" BGCOLOR="#669999">&nbsp;</TD>
<TD HEIGHT="20" ALIGN="LEFT" VALIGN="TOP" BGCOLOR="#669999"><!-- #BeginLibraryItem "/Library/mouseOver buttons.lbi" --><TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0" WIDTH="425">
<TR>
<TD><A HREF="../../index.htm" onMouseOut="di('Nbuttonshorizontal_01_01','Ibuttonshorizontal_01_01');return false;" onMouseOver="di('Nbuttonshorizontal_01_01','Ibuttonshorizontal_01_01o');return false;"><IMG NAME="Nbuttonshorizontal_01_01" SRC="../../images/buttons/home.gif" WIDTH="85" HEIGHT="17" BORDER="0" ALT="Home"></A></TD>
<TD><A HREF="../../search/index.htm" onMouseOut="di('Nbuttonshorizontal_01_02','Ibuttonshorizontal_01_02');return false;" onMouseOver="di('Nbuttonshorizontal_01_02','Ibuttonshorizontal_01_02o');return false;"><IMG NAME="Nbuttonshorizontal_01_02" SRC="../../images/buttons/search.gif" WIDTH="85" HEIGHT="17" BORDER="0" ALT="Search"></A></TD>
<TD><A HREF="../../sitemap/index.htm" onMouseOut="di('Nbuttonshorizontal_01_03','Ibuttonshorizontal_01_03');return false;" onMouseOver="di('Nbuttonshorizontal_01_03','Ibuttonshorizontal_01_03o');return false;"><IMG NAME="Nbuttonshorizontal_01_03" SRC="../../images/buttons/sitemap.gif" WIDTH="85" HEIGHT="17" BORDER="0" ALT="Site Map"></A></TD>
<TD><A HREF="../../news/index.htm" onMouseOut="di('Nbuttonshorizontal_01_04','Ibuttonshorizontal_01_04');return false;" onMouseOver="di('Nbuttonshorizontal_01_04','Ibuttonshorizontal_01_04o');return false;"><IMG NAME="Nbuttonshorizontal_01_04" SRC="../../images/buttons/new.gif" WIDTH="85" HEIGHT="17" BORDER="0" ALT="What's New"></A></TD>
<TD><A HREF="../../feedback/index.htm" onMouseOut="di('Nbuttonshorizontal_01_05','Ibuttonshorizontal_01_05');return false;" onMouseOver="di('Nbuttonshorizontal_01_05','Ibuttonshorizontal_01_05o');return false;"><IMG NAME="Nbuttonshorizontal_01_05" SRC="../../images/buttons/feedback.gif" WIDTH="85" HEIGHT="17" BORDER="0" ALT="Feedback"></A></TD>
</TR>
</TABLE><!-- #EndLibraryItem --></TD>
<TD HEIGHT="20" BGCOLOR="#669999" WIDTH="2%">&nbsp;</TD>
</TR>
</TABLE>
        <table border="0" width="100%" cellspacing="0" cellpadding="0">
          <tr>
            <td width="2%" bgcolor="#99CCCC">&nbsp;</td>
            
<td width="96%" align="RIGHT" valign="MIDDLE" bgcolor="#99CCCC"><font color="#003366"><a href="../../index.htm"> 
<b>Documents </b></a><b>/ <a href="../notes.htm">Notes</a> / A Grammar of Dublin 
Core</b></font></td>
            <td width="2%" bgcolor="#99CCCC">&nbsp;</td>
          </tr>
        </table>
        <TABLE BORDER="0" WIDTH="100%" CELLSPACING="0" CELLPADDING="0">
<TR>
            <TD WIDTH="2%" BGCOLOR="#FFFFCC" height="9307">&nbsp;</TD>
            <TD WIDTH="96%" VALIGN="TOP" BGCOLOR="#FFFFCC" height="9307"><br>
              <table border="0" width="100%" cellspacing="0" cellpadding="2">
                <tr> 
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><b>Title:</b></div>
                  </td>
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"> 
                      <h3><font color="#990000">A Grammar of Dublin Core</font></h3>
                    </div>
                  </td>
                </tr>
                <tr> 
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><b>Creator:</b></div>
                  </td>
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><a href="mailto:thomas.baker@gmd.de">Thomas 
                      Baker </a></div>
                  </td>
                </tr>
                <tr> 
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><b>Date Issued: </b></div>
                  </td>
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left">2000-08-07</div>
                  </td>
                </tr>
                <tr> 
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><b>Identifier:</b></div>
                  </td>
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><a href="grammar-20000807.htm">http://purl.org/dc/documents/notes/grammar-20000807.htm</a></div>
                  </td>
                </tr>
                <tr> 
                  <td align="RIGHT" valign="TOP" height="24"> 
                    <div align="left"><b>Replaces:</b></div>
                  </td>
                  <td align="RIGHT" valign="TOP" height="24"> 
                    <div align="left">Not Applicable</div>
                  </td>
                </tr>
                <tr> 
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><b>Is Replaced By:</b></div>
                  </td>
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left">Not Applicable</div>
                  </td>
                </tr>
                <tr> 
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left"><b>Latest version:</b></div>
                  </td>
                  <td align="RIGHT" valign="TOP"> 
                    <div align="left">http://purl.org/dc/documents/notes/grammar</div>
                  </td>
                </tr>
                <tr> 
                  <td width="20%" valign="TOP"> 
                    <div align="left"></div>
                  </td>
                  <td width="80%" valign="TOP"> 
                    <div align="left"></div>
                  </td>
                </tr>
                <tr> 
                  <td width="20%" valign="TOP"> 
                    <div align="left"><b>Status of document: </b></div>
                  </td>
                  <td width="80%" valign="TOP"> 
                    <div align="left">This is a <a href="../notes.htm">Dublin 
                      Core Metadata Initiative Note.</a></div>
                  </td>
                </tr>
                <tr> 
                  <td valign="TOP" height="112"><b>Description of document:</b></td>
                  <td valign="TOP" height="112">Dublin Core is often presented 
                    as a modern form of catalog card -- a set of elements (and 
                    now qualifiers) that describe resources in a complete package. 
                    Sometimes it is proposed as an exchange format for sharing 
                    records among multiple collections. The founding principle 
                    that &quot;every element is optional and repeatable&quot; 
                    reinforces the notion that a Dublin Core description is to 
                    be taken as a whole. This paper, in contrast, is based on 
                    a much different premise: Dublin Core is a language. More 
                    precisely, it is a small language for making a particular 
                    class of statements about resources. Like natural languages, 
                    it has a vocabulary of word-like tokens; two classes of tokens 
                    that reflect their function within statements -- elements 
                    and qualifiers, analogous to nouns and adjectives; and a syntax 
                    for arranging words into statements according to a simple 
                    pattern. </td>
                </tr>
                <tr> 
                  <td valign="TOP" width="23%"><b>Document<br>
                    metadata:</b></td>
                  <td valign="TOP" width="77%"><a href="grammar-20000807.htm.rdf"><br>
                    http://purl.org/dc/documents/notes/grammar-20000807.htm.rdf</a> 
                  </td>
                </tr>
                <tr> 
                  <td valign="TOP" colspan="2"> 
                    <hr noshade>
                  </td>
                </tr>
              </table>
              <blockquote> 
                <p><b><i>This is a pre-publication draft posted for the purposes 
                  of discussion and correction. It is expected that the final 
                  draft will be published in the October 2000 issue of D-Lib Magazine.</i></b></p>
                <p><b><i>Please contact me for permission to cite.</i></b></p>
              </blockquote>
              <hr noshade>
              <blockquote>
                <p>&quot;We begin with the sentence, because the sentence is the 
                  unit of discourse, because words can be classified only from 
                  their function in the sentence, and because the pupil should, 
                  from the outset, see that what determines the words in the sentence 
                  and the sentence itself is the thought.&quot;</p>
                <p>Alonso Reed and Brainerd Kellogg, Higher Lessons in English, 
                  1877 </p>
              </blockquote>
              <h2>Dublin Core Made Simple</h2>
              <p> <b>Dublin Core as a Language.</b> Dublin Core is often presented 
                as a modern form of <i>catalog card</i> -- a set of elements (and 
                now qualifiers) that describe resources in a complete <i>package</i>. 
                Sometimes it is proposed as an <i>exchange format</i> for sharing 
                records among multiple collections. The founding principle that 
                &quot;every element is optional and repeatable&quot; reinforces 
                the notion that a <i>Dublin Core description</i> is to be taken 
                as a whole. This paper, in contrast, is based on a much different 
                premise: Dublin Core is a <i>language</i>. More precisely, it 
                is a small language for making a particular <i>class of statements</i> 
                about resources. Like natural languages, it has a vocabulary of 
                word-like tokens; two classes of tokens that reflect their function 
                within statements -- elements and qualifiers, analogous to nouns 
                and adjectives [<a href="#1">1</a>]; and a syntax for arranging 
                words into statements according to a simple pattern. </p>
              <p><b>A Pidgin for Digital Tourists.</b> Whenever tourists order 
                a meal or ask directions in an unfamiliar language, considerate 
                native speakers will spontaneously limit themselves to basic words 
                and simple sentence patterns along the lines of &quot;<b>I am</b> 
                so-and-so&quot; or &quot;<b>This is</b> such-and-such&quot;. Linguists 
                call this pidginization. In such situations, a small phrase book 
                or translated menu can be most helpful. By analogy, today's Web 
                has been called an Internet Commons where users and information 
                providers from a wide range of scientific, commercial, and social 
                domains present their information in a variety of incompatible 
                data models and description languages. In this context, Dublin 
                Core presents itself as a metadata pidgin for digital tourists 
                who must find their way in this linguistically diverse landscape. 
                Its vocabulary is small enough to learn quickly, and its basic 
                pattern is easily grasped. It is well-suited to be an auxiliary 
                language for digital libraries. </p>
              <p><b>This Grammar.</b> This grammar starts by defining terms. It 
                then follows a 200-year-old tradition of English grammar teaching 
                by focusing on the structure of single statements (see the Reed 
                and Kellogg quote above). It concludes by looking at the growing 
                dictionary of Dublin Core vocabulary terms -- its <i>registry</i>, 
                and at how statements can be used to build the metadata equivalent 
                of paragraphs and compositions -- the <i>application profile</i>. 
              </p>
              <h2><br>
                Dublin Core Tokens</h2>
              <p> <b>Tokens in general.</b> Strictly speaking, a Dublin Core token 
                is a unique identifier formed by a name (e.g. Title) prefixed 
                by the URI of the namespace in which it is defined, as in http://purl.org/dc/elements/1.1/title. 
                In this context, a namespace is a vocabulary that has been formally 
                published, usually on the Web; it describes tokens with natural-language 
                labels, definitions, and other relevant documentation. Currently 
                there are two namespaces for Dublin Core: the Dublin Core Element 
                Set and the Dublin Core Qualifiers, denoted here by the conventional 
                abbreviations dc: and dcq: [<a href="#dcmi1999">DCMI 1999</a>, 
                <a href="#dcmi2000">DCMI 2000</a>]. In this paper, as in many 
                application environments, the tokens are referred to in their 
                short form, e.g. dc:title. </p>
              <p><b>Elements. </b>The fifteen elements of the Dublin Core Element 
                Set are the defining feature of Dublin Core as a language. Its 
                tokens are dc:title, dc:creator, dc:subject, dc:description, dc:publisher, 
                dc:contributor, dc:date, dc:type, dc:format, dc:identifier, dc:source, 
                dc:language, dc:relation, dc:coverage, and dc:rights. These correspond 
                to fifteen broadly defined <i>properties</i> of resources that 
                are generally useful for searching across repositories in multiple 
                domains. </p>
              <p><b>Qualifiers.</b> Qualifiers modify the properties of Dublin 
                Core statements by specifying, in the manner of natural-language 
                adjectives, &quot;what kind&quot; of subject, date, or relation. 
                Qualifiers currently fall into two classes. <i>Encoding schemes</i> 
                are pointers to contextual information or parsing rules that aid 
                in the interpretation of an element value. For example, dcq:lcsh 
                qualifies dc:subject to specify that the keywords are a Library 
                of Congress Subject Heading, and dcq:iso8601 qualifies dc:date 
                to specify that the string &quot;2000-06-13&quot; is formatted 
                according to an international standard. <i>Element refinements</i> 
                make a property more specific without extending its meaning, such 
                as dcq:revised as a modifier of dc:date (yielding &quot;date revised&quot;). 
                In July 2000, a DCMI Usage Committee recommended a batch of fifty-two 
                qualifiers to exemplify these principles of qualification, but 
                the qualifiers for Dublin Core statements may also come from other 
                namespaces, as in the example yans:author below (where yans: is 
                a hypothetical YetAnotherNameSpace). </p>
              <p><b>Tokens defined in languages other than English.</b> Strictly 
                speaking, tokens are machine-readable symbols that stand for general 
                concepts such as &quot;title,&quot; &quot;subject,&quot; and &quot;date.&quot; 
                The Dublin Core Metadata Initiative discusses and approves their 
                definitions in English. In principle, however, they can be labelled 
                and defined equally well in any other language, such as Dutch 
                or Arabic or Thai. For example, dc:creator may be labeled &quot;Creatore&quot; 
                in Italian, &quot;Pencipta&quot; in Bahasa Indonesian, or &quot;Verfasser&quot; 
                in German [<a href="#baker1998">Baker 1998</a>]. To date, the 
                Element Set has been translated into twenty-six languages. Bear 
                in mind as you read that although this grammar is written in English, 
                a Japanese version could translate every English word here into 
                Japanese -- all grammar terms and example sentences included -- 
                <i>except</i> for the English-like names of the tokens themselves. 
              </p>
              <h2><br>
                Dublin Core Statements<br>
              </h2>
              <p><b>Diagramming statements.</b> Since the 1870s, the grammar of 
                sentences has been taught in (American) high schools using sentence 
                diagrams [<a href="#reedkellogg">Reed and Kellogg 1886</a>, <a href="#househarman">House 
                and Harman 1950</a>, <a href="#warriner1973">Warriner et al. 1973</a>]. 
                This style has a binary flavor -- the sentence baseline is intersected 
                to divide the subject, &quot;that of which something is said,&quot; 
                from the <i>predicate</i>, that which is said of the subject. 
                Within the predicate, a smaller line separates the <i>object</i> 
                (in Dublin Core terms, the property) from the <i>objective complement</i> 
                (in Dublin Core, the property value). This style is nicely expressive 
                of Dublin Core because the qualifiers, hanging below the baseline 
                on slanted lines, are visibly subordinate to the properties they 
                modify (see Figures 1 and 2). </p>
              <p align="left"></p>
              <p align="left"><img src="dc_fig1.gif" width="492" height="319"></p>
              <p><b>Figure 1: The general pattern</b></p>
              <p>&nbsp;</p>
              <p><b>Parts of a Statement.</b> Dublin Core is in effect a class 
                of statements of the pattern &quot;Resource has property X,&quot; 
                where &quot;resource&quot; is the implied subject; followed by 
                an implied verb (&quot;has&quot;); followed by one of fifteen 
                properties from the Dublin Core Element Set; followed by a property 
                value -- an appropriate literal such as a person's name, a date, 
                some words, or an URL. For example: &quot;Resource has dc:creator 
                'Tom Baker',&quot; and &quot;Resource has dc:date '2000-06-13'.&quot; 
                Optional qualifiers may make the meaning of a property more definite, 
                as in &quot;Resource has dc:date dcq:revised '2000-06-13'.&quot; 
              </p>
              <p><b>Principles of Qualification.</b> The qualification of Dublin 
                Core properties is guided by a rule known colloquially as the 
                Dumb-Down Principle. According to this rule, &quot;a client should 
                be able to ignore any qualifier and use the description as if 
                it were unqualified. While this may result in some loss of specificity, 
                the remaining element value (minus the qualifier) must continue 
                to be generally correct and useful for discovery&quot; [<a href="#dcmi2000">DCMI 
                2000</a>]. Qualification is therefore supposed only to refine, 
                not extend the semantic scope of a property. In borderline cases, 
                qualification must never result in a literal that could be misleading. 
              </p>
              <p><b>Appropriate Literals</b>. Whether a property value is &quot;useful 
                for discovery&quot; is at the heart of the notion of appropriateness. 
                A property value should be a string of an expected type -- usually, 
                for example, some sort of name for dc:creator, dc:contributor, 
                dc:publisher, or dc:title; a URL for dc:relation, dc:identifier, 
                or dc:source;<i> full-text sentences</i> for dc:description; <i>short 
                text strings</i> or <i>keywords</i> for dc:subject, dc:type, dc:format, 
                and dc:language; and a recognizable combination of <i>years, months,</i> 
                and <i>days</i> for dc:date. Both in theory and in practice, the 
                range of expected data types varies from property to property; 
                which types are &quot;appropriate&quot; for a given property is 
                open to interpretation and debate (see below). </p>
              <p><b>Evaluating Statements.</b> To test whether a Dublin Core statement 
                is conceptually solid, cover the qualifiers with your hand (&quot;dumbing 
                down&quot;), read the statement above the line, and ask: </p>
              <ul>
                <li>Does it make sense?</li>
                <li> Is it factually and logically correct? </li>
                <li> Is the literal &quot;appropriate&quot; for the given property?</li>
              </ul>
              <h2>Examples</h2>
              <p></p>
              <p></p>
              <p><img src="dc_fig2.gif" width="421" height="173"></p>
              <p><img src="dc_fig3.gif" width="531" height="163"></p>
              <p><b>Figure 2: Some statements, diagrammed</b></p>
              <p>Resource has dc:title 'A Grammar of Dublin Core.' <br>
              </p>
              <blockquote> 
                <p>Does it make sense? Yes. Is it correct? Yes. Is the literal 
                  &quot;appropriate&quot;? Yes, a sequence of words is normal 
                  and expected for the property dc:title. </p>
              </blockquote>
              <p> Resource has dcq:iso8601 dcq:revised dc:date '2000-06-13.' </p>
              <blockquote> 
                <p> This means that a resource was revised on 6 June 2000. The 
                  statement dumbs down to &quot;Resource has dc:date '2000-06-13',&quot; 
                  which means that the date 6 June 2000 has something to do with 
                  the life-cycle of the resource. This is less specific than the 
                  qualified statement, but still correct. </p>
              </blockquote>
              <p> Resource has dcq:lcsh dc:subject 'Languages -- Grammar.' </p>
              <blockquote> 
                <p> This says that the resource is about the subject &quot;grammar 
                  of languages,&quot; and that these words are a controlled term 
                  from the Library of Congress Subject Headings. The statement 
                  dumbs down to &quot;Resource has dc:subject 'Languages -- Grammar',&quot; 
                  which makes sense even if we do not know that the term comes 
                  from the Library of Congress. </p>
              </blockquote>
              <p> Resource has yans:cerif dc:subject 'H352 Grammar, semantics, 
                semiotics, syntax.' </p>
              <blockquote> 
                <p> This literal includes a language-independent abbreviation, 
                  &quot;H352,&quot; which will be useful for applications that 
                  understand yans:cerif. It may confuse some users, but otherwise 
                  does no harm. </p>
              </blockquote>
              <p> Resource has yans:author dc:creator 'Tom Baker.' </p>
              <blockquote> 
                <p> Users of the yans: namespace will recognize that yans:author 
                  is being used here as an adjective modifying dc:creator (just 
                  as talk is an adjective modifying show in the phrase talk show). 
                  It is an awkward but correct way to say that Tom Baker is &quot;the 
                  author sort of creator&quot; -- i.e., the author -- of the resource. 
                  This statement dumbs down to &quot;Resource has dc:creator 'Tom 
                  Baker',&quot; -- less specific but still correct. </p>
              </blockquote>
              <p> Resource has dc:relation 'http://www.dlib.org/dlib/december98/12baker.html.' 
              </p>
              <blockquote> 
                <p> The statement asserts that the resource is somehow related 
                  to an article in D-Lib Magazine (a URL is appropriate as a literal 
                  for dc:relation). </p>
              </blockquote>
              <h2>Some not-so-good examples</h2>
              <p> *Resource has dc:creator 'name.given:Thomas; name.family:Baker; 
                employer:GMD; contact:Schloss Birlinghoven, D-53754 Sankt Augustin.' 
              </p>
              <blockquote> 
                <p> A reader can see what this <i>compound</i> or <i>structured 
                  value </i>is saying. But a search engine would need to know 
                  how to parse out the components and suppress the tags in order 
                  to index this cleanly, lest a search for creators named &quot;Augustin&quot; 
                  should yield false hits. Generally speaking, things like affiliations 
                  and addresses -- properties <i>of the creator</i> of a resource 
                  -- do not belong in Dublin Core statements about the resource 
                  itself. Metadata providers that used such compound values within 
                  specific usage communities could &quot;speak Dublin Core&quot; 
                  to the rest of the world by exporting just the name (&quot;Resource 
                  has dc:creator 'Tom Baker'&quot;). </p>
              </blockquote>
              <p> *Resource has yans:creator 'Tom Baker.' </p>
              <blockquote> 
                <p> This statement is useful for applications that recognize the 
                  yans: namespace, but it is not a &quot;Dublin Core&quot; statement 
                  per se. If the yans: and dc: definitions of Creator were compatible, 
                  either the metadata provider or an indexing application could 
                  use a crosswalk to translate this into the Dublin Core statement 
                  &quot;Resource has dc:creator 'Tom Baker'.&quot; </p>
              </blockquote>
              <h2>Ongoing Issues<br>
              </h2>
              <p><b>Fifteen fuzzy buckets. </b>The properties of Dublin Core are 
                like fifteen big buckets, and the rules about which types of literals 
                may be placed in those buckets are somewhat fuzzy. This fuzziness 
                is intentional -- the Internet is a diverse and chaotic place 
                where a more disciplined, top-down approach to standardization 
                is unrealistic, especially for use across multiple domains and 
                languages. If the rules of Dublin Core were more precise, people 
                would inevitably bend them. In the jargon of computer science, 
                then, Dublin Core is &quot;weakly typed&quot; as a language. A 
                search engine may find a variety of information types in any given 
                bucket -- from URLs to non-textual, alphanumeric strings to full 
                text in any language. </p>
              <p><b>The &quot;appropriateness&quot; of literals.</b> Requirements 
                for the appropriateness of a literal are in practice somewhat 
                contradictory. Ideally, a literal should be useful for discovery, 
                which means it should make sense &quot;as is&quot; to the average 
                user. Yet it should also be processable in an expected way by 
                search engines. Programmers need to be know, for example, when 
                to index on strings separated by white space, minus punctuation 
                and stop words, when to expect a URL, and when to expect an alphanumeric 
                date string. Some elements are particularly ambiguous in this 
                regard. Dc:rights, for example, can be free text or a URL. Dc:coverage 
                can be a place name, the name of a time period, a numeric identifier 
                for a place or time, or even a compound value -- in effect, a 
                miniature DTD with multiple sub-components separated by semicolons 
                or XML tags. Where such a range of data types is permissible, 
                should it be acceptable to relax the Dumb-Down Principle? Should 
                qualifiers in effect modify the expected data type of the literal? 
                Or should the presence of, say, XML angle brackets be expected 
                to trigger, automatically, a change in parsing algorithms? Would 
                such a complexification of a property compensate for the corresponding 
                loss of Dublin Core's overall simplicity? Or can the need for 
                complex description be resolved in a broader framework, outside 
                Dublin Core per se? </p>
              <p><b>Application profiles.</b> The broader framework for such a 
                resolution, it now seems, is the application profile. Application 
                profiles are the metadata equivalent of dialects or <i>creoles 
                </i>(adapted pidgins). They may have richer vocabularies and sentence 
                structures that make sense to users in a specific context. Implementors 
                who need an application language more expressive than a pidgin, 
                then, may combine tokens from Dublin Core and other namespaces 
                into a larger vocabulary or embed them into a syntactically more 
                sophisticated data model. Such linguistic innovation is perfectly 
                reasonable as long as implementors respect a distinction between 
                <i>namespaces</i>, where tokens and their canonical definitions 
                are declared, and <i>profiles</i>, where tokens from namespaces 
                are (only) reused, combined, adapted, and constrained [<a href="#heery2000">Heery 
                2000</a>]. The profile is the natural locus for full <i>descriptions</i> 
                -- the <i>catalog card</i> or <i>metadata package</i> taken as 
                a whole. </p>
              <p><b>For example,</b> the Collection Description Schema of the 
                Research Support Libraries Programme (RSLP) in the UK uses the 
                token dc:title -- officially defined as a &quot;name given to 
                the resource&quot; -- but defines it more narrowly as a &quot;name 
                given <i>to the collection</i>.&quot; Alongside such Dublin Core 
                tokens, it uses concepts from other namespaces, such as cld:accessConditions 
                (for the hours of access and classes of permitted users) from 
                a local &quot;Collection Level Description&quot; namespace. These 
                tokens are framed in a data model that specifies typical relationships 
                between a collection, its individual items, a collector, an owner, 
                a location, and the constituent parts of a collection -- each 
                of which may be described with multiple attributes [<a href="#rslp">RSLP</a>]. 
                An RSLP description does not talk just about information resources 
                per se, but also about the people, organizations, and access frameworks 
                related to those resources. </p>
              <p><b>Developing profiles and coining new tokens. </b>Some working 
                groups of DCMI are developing domain-specific profiles of Dublin 
                Core, surveying the descriptive needs of fields such as education 
                and government to determine an appropriate mix of Dublin Core 
                tokens and tokens from other namespaces and perhaps to coin additional 
                tokens for concepts not covered in existing standards. These working 
                groups need to consider that literals appropriate to domain specialists 
                may not make much sense to general users, especially in statements 
                that have been &quot;dumbed down.&quot; As the example above makes 
                clear, moreover, core elements are needed for classes of resources 
                other than document-like objects, such as people and organizations 
                (generically, <i>agents</i>) and spatially and temporally grounded 
                <i>events</i>. Urgently required are data-model conventions for 
                combining multiple entities within an application profile -- for 
                example, to include an author's affiliation and address in the 
                description for a resource -- and stable formats for the encoding 
                of profiles as XML or RDF schemas. </p>
              <p><b>Building a dictionary (registry) for Dublin Core.</b> Historically, 
                the standardization of national languages in countries rich with 
                dialects has been helped by the compilation of dictionaries. Good 
                dictionaries often strike a balance between prescribing guidelines 
                for good style and describing a living language with examples 
                of actual usage. Metadata languages like Dublin Core have hitherto 
                been developed prescriptively, in standards committees, as there 
                have been no convenient ways to track local innovations in usage 
                and feed them back into the standardization process. However, 
                several related developments are now enabling the collective construction 
                of metadata dictionaries, or registries. The new Resource Description 
                Framework (RDF) Schemas standard of the World Wide Web Consortium 
                provides a format for publishing schemas that can be harvested 
                by metadata search engines [<a href="#w3c2000">W3C 2000</a>]. 
                Eric Miller has developed an open-source software toolkit for 
                indexing a distributed corpus of RDF schemas as one huge database, 
                with an interface for following hyperlinked cross-references between 
                related terms in namespaces and profiles -- in effect, a metadata 
                schema browser [<a href="#myrdf">MyRDF</a>]. The Dublin Core Metadata 
                Initiative is using this toolkit to manage its namespace [Open 
                Registry], and a working group is formulating technical and policy 
                guidelines for its ongoing management [<a href="#dcregistry">DC-Registry</a>]. 
                A European project, SCHEMAS, is promoting the use of RDF schemas 
                to help harmonize metadata practice among EU-funded projects and 
                is using RDF to build a layer of annotated pointers to namespaces, 
                profiles, and metadata activities generally [<a href="#schemas">SCHEMAS</a>]. 
              </p>
              <p><b>Does your application speak Dublin Core? </b>Pidgins are inherently 
                limited in what they can express, but they are easy to learn and 
                enormously useful. In real life, we talk one way to our professional 
                colleagues and another way to visitors from other cultures. Our 
                digital library applications need to do this as well. Simplicity 
                and complexity are both appropriate, depending on context. If 
                Dublin Core is too simple or generic to use as the native idiom 
                of a particular application, its tokens can be embedded in a richer 
                local vocabulary from which pidgin statements can be generated 
                or extracted as needed. This output should also be filtered to 
                keep the fifteen buckets clear of encoding debris and semantic 
                silt. One should treat digital tourists with courtesy and refrain 
                from confounding them with subordinate clauses or fancy constructs. 
                However sophisticated its local vocabulary or grammar may be, 
                an application should be able to speak a pidgin that all will 
                understand. Simple, semantically clean, computationally obvious 
                values will help us negotiate our way through a splendidly diverse 
                and heterogeneous Internet.</p>
              <p></p>
              <h2><br>
                Appendix: Dublin Core and RDF grammar compared<br>
              </h2>
              <p><b><font size="2">Directed Labelled Graphs.</font></b><font size="2"> 
                The Resource Description Framework (RDF), a relatively new standard 
                of the World Wide Web Consortium, is emerging as an information 
                model and encoding format of choice for metadata and application 
                profiles that use Dublin Core [<a href="#w3c1999">W3C 1999</a>, 
                <a href="#w3c2000">W3C 2000</a>]. RDF is a grammar for expressing 
                relationships among resources located or represented somewhere 
                on the Internet. These relationships are depicted graphically 
                with Directed Labelled Graphs (DLGs), which use arcs (predicates 
                expressing properties) to establish a relationship between multiple 
                nodes (resources). Nodes are seen as subjects or objects depending 
                on the direction of the arrow. </font></p>
              <p><img src="dc_fig4.gif" width="525" height="306"></p>
              <p></p>
              <p><b><font size="2">Figure 3: The general pattern of RDF statements 
                (&quot;triples&quot;)</font></b></p>
              <p><b><font size="2">RDF triples.</font></b><font size="2"> In contrast 
                to the binary flavor of the pedagogical English grammars cited 
                above, the model of RDF statements is a tripartite one of <i>subject</i>, 
                <i>predicate</i>, and <i>object</i> (see Figure 3). RDF statements, 
                accordingly, are called &quot;triples&quot;: </font></p>
              <blockquote> 
                <p><font size="2">A <i>property</i> is a specific aspect, characteristic, 
                  attribute, or relation used to describe a resource. ... A specific 
                  resource together with the named property plus the value of 
                  that property for that resource is an RDF <i>statement</i>. 
                  These three individual parts of a statement are called, respectively, 
                  the <i>subject</i>, the <i>predicate</i>, and the <i>object</i>. 
                  The object of a statement (i.e., the property value) can be 
                  another resource or it can be a literal; i.e., a resource (specified 
                  by a URI) or a simple string or other primitive datatype defined 
                  by XML. In RDF terms, a <i>literal </i>may have content that 
                  is XML markup but is not further evaluated by the RDF processor 
                  [<a href="#w3c1999">W3C 1999</a>]. </font></p>
              </blockquote>
              <p><font size="2"><br>
                Figure 4 shows an RDF triple consisting of the subject &quot;http://www.w3.org/Home/Lassila,&quot; 
                predicate &quot;has creator,&quot; and object &quot;Ora Lassila.&quot; 
                </font> </p>
              <p><img src="dc_fig5.gif" width="467" height="98"></p>
              <p> <b><font size="2">Figure 4: Directed Labelled Graph of a triple</font></b></p>
              <p><font size="2"><b>Subject of an RDF statement.</b> The subject 
                of an RDF statement is anything that can be named by a Universal 
                Resource Identifier (URI). In principle, this is anything from 
                a Web page or museum artifact to an abstract concept or event. 
                The subject of a Dublin Core statement, in contrast, is an &quot;information 
                resource,&quot; perhaps a &quot;document-like object&quot; [<a href="#2">2</a>]. 
                In Dublin Core, the subject (&quot;resource&quot;) is always implied, 
                never named as in RDF. The RDF statement in Figure 4, then, would 
                be expressed in Dublin Core as two statements: &quot;Resource 
                has dc:identifier 'http://www.w3.org/Home/Lassila',&quot; and 
                &quot;Resource has dc:creator 'Ora Lassila'.&quot; As long as 
                it is clear from the context that the two statements refer to 
                the same resource -- for instance, they are both in the same record 
                -- one can infer that Ora Lassila has created the Web page [<a href="#3">3</a>].</font></p>
              <p> </p>
              <table width="75%" border="1">
                <tr> 
                  <td bgcolor="#FFFFCE"> 
                    <h3><font size="2">English</font></h3>
                  </td>
                  <td> 
                    <h3><font size="2">Dublin Core</font></h3>
                  </td>
                  <td> 
                    <h3><font size="2">RDF</font></h3>
                  </td>
                </tr>
                <tr> 
                  <td><font size="2"><b>words (have classes)</b></font></td>
                  <td><font size="2"><b>tokens (have classes)</b></font></td>
                  <td><font size="2"><b>nodes and arcs</b></font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    nouns</font></td>
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    elements</font></td>
                  <td><font size="2"></font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    adjectives</font></td>
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    qualifiers</font></td>
                  <td><font size="2"></font></td>
                </tr>
                <tr> 
                  <td><font size="2"><b>sentences (have parts)</b></font></td>
                  <td><font size="2"><b>statements (have parts)</b></font></td>
                  <td><font size="2"><b>statements (have parts)</b></font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    subject</font></td>
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    implied subject</font></td>
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    subject</font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    predicate</font></td>
                  <td><font size="2"></font></td>
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    predicate</font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    verb </font></td>
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    implied verb</font></td>
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    implied verb</font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    object </font></td>
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    property </font></td>
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    property </font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    objective complement</font></td>
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    property value</font></td>
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    object (property value)</font></td>
                </tr>
                <tr> 
                  <td><font face="Symbol" size="2">&#174;</font><font size="2"> 
                    modifiers</font></td>
                  <td><font face="Symbol" size="2">&#174;&#174;</font><font size="2"> 
                    qualifiers </font></td>
                  <td><font size="2"></font></td>
                </tr>
              </table>
              <p><b><font size="2">Figure 5: Grammar Terms Compared</font></b></p>
              <p><font size="2"><b>Predicate of an RDF statement. </b>The predicate 
                of an RDF statement is an implied verb plus a property. This is 
                more restricted than the standard definition of a predicate in 
                high-school English grammar, which includes (in effect) &quot;everything 
                to the right of the vertical intersector in a sentence diagram&quot; 
                -- that is, everything within a clause that is said about a subject. 
                However, since most people have only the vaguest recollection 
                of predicates from high school, this grammar avoids using the 
                term at all. </font></p>
              <p><font size="2"><b>Property value of RDF statements.</b> In RDF, 
                these are called <i>objects.</i> But again, there is risk of confusion 
                with English grammar. In the sentence &quot;This paper has the 
                title 'A Grammar of Dublin Core',&quot; some high-school English 
                grammars see 'A Grammar of Dublin Core' as an <i>objective complement</i> 
                with respect to the <i>object</i> of the sentence, &quot;title&quot; 
                (see Fig. 5). Compounding the confusion, computer scientists are 
                oriented to <i>objects</i> of a much different sort, and the &quot;resource&quot; 
                of a Dublin Core statement might even be a physical <i>object</i>. 
                This grammar avoids the term <i>object</i> altogether. </font></p>
              <p><font size="2"><b>The lack of qualifiers in RDF.</b> In Dublin 
                Core, qualifiers are tokens which -- in the context of a Dublin 
                Core statement -- depend on and modify one of Dublin Core's fifteen 
                properties. The basic RDF model does not express this type of 
                dependency. Properties may relate to another as narrower to broader 
                terms (using the relation &quot;SubPropertyOf&quot;), as &quot;Author&quot; 
                relates to &quot;Creator.&quot; In native RDF, however, both &quot;Author&quot; 
                and &quot;Creator&quot; are full properties in their own right. 
                </font></p>
              <p><font size="2"><b>The compatibility of Dublin Core and RDF.</b> 
                The differences between Dublin Core and RDF outlined above are 
                largely terminological; at issue is what the parts of a statement 
                such as 'Resource has Property X' should be called. But the difficulty 
                of choosing the right words for this grammar should not obscure 
                the basic compatibility and complementarity of Dublin Core and 
                RDF. RDF offers a general model for statements, while Dublin Core 
                offers a particular type of pidgin-like statement about information 
                resources and privileges a small set of special words. RDF offers 
                a specific encoding in XML for expressing its conceptual model, 
                while Dublin Core is by design independent of any particular encoding 
                format. RDF, then, is just one of the possible information models 
                that can use tokens from Dublin Core, while Dublin Core is just 
                one of the languages expressible in RDF. </font></p>
              <h2><br>
                Footnotes</h2>
              <p> <a name="1"></a><br>
                [1] Early in the workshop series, before it was formally called 
                a Metadata Initiative, the Dublin Core effort was declared to 
                be primarily about<i> semantics</i> in contrast to <i>syntax</i>, 
                which was declared to be out of scope. In that context, however, 
                <i>syntax</i> referred to the encoding of metadata in HTML, database, 
                and (later) XML or RDF formats; it involved questions such as 
                which tags to place where, within what angle brackets or punctuation, 
                and how to group or nest related elements. This grammar, in contrast, 
                presents the syntax of Dublin Core statements in a linguistic 
                sense, as the rules governing how the words of a sentence are 
                related to each other -- which words modify other words, and which 
                words are of central importance in the statement. </p>
              <p><a name="2"></a><br>
                [2] In practice, the reasoning behind this is circular: Dublin 
                Core properties are appropriate for any entity that has such properties. 
                This circularity has spared us a perhaps futile attempt to seek 
                philosophical consensus on a universal ontology of entity classes 
                and allowed us to get on with the task of describing whatever 
                it is we are describing. </p>
              <p><a name="3"></a><br>
                [3] Dan Brickley points out that software tools could exploit 
                additional information about entities and vocabularies to translate 
                sequences of RDF-encoded Dublin Core statements into a natural-language 
                style that flows more elegantly and reads less like a pidgin. 
              </p>
              <h2><br>
                Acknowledgements<br>
              </h2>
              <p>I have discussed this paper with many colleagues from both DCMI 
                and other communities. Special thanks to Bill Arms, Dan Brickley, 
                David Bearman, Rachel Heery, Diane Hillmann, Erik Jul, Carl Lagoze, 
                Sigfrid Lundberg, Eric Miller, Paul Miller, Andy Powell, and Shigeo 
                Sugimoto for valuable comments on earlier drafts. Many thanks 
                to Michael Kasper for advice regarding the literature on English 
                grammar. </p>
              <h2> <br>
                References</h2>
              <p> <a name="baker1998"></a><br>
                [Baker 1998] Thomas Baker, &quot;Languages for Dublin Core,&quot; 
                D-Lib Magazine, December 1998, <a href="http://www.dlib.org/dlib/december98/12baker.html">http://www.dlib.org/dlib/december98/12baker.html</a>. 
              </p>
              <p><a name="bernerslee1998"></a><br>
                [Berners-Lee 1998] Tim Berners-Lee, &quot;Why RDF model is different 
                from the XML model,&quot; <a href="http://www.w3.org/DesignIssues/RDF-XML.html">http://www.w3.org/DesignIssues/RDF-XML.html</a>. 
              </p>
              <p><a name="dcmi1999"></a><br>
                [DCMI 1999] Dublin Core Metadata Initiative, &quot;Dublin Core 
                Metadata Element Set, Version 1.1,&quot; <a href="http://purl.org/dc/documents/rec-dces-19990702.htm">http://purl.org/dc/documents/rec-dces-19990702.htm</a>. 
              </p>
              <p><a name="dcmi2000"></a><br>
                [DCMI 2000] Dublin Core Metadata Initiative, &quot;Dublin Core 
                Qualifiers,&quot; <a href="http://purl.org/dc/documents/dcmi-qualifiers">http://purl.org/dc/documents/dcmi-qualifiers</a>. 
              </p>
              <p><a name="dcregistry"></a><br>
                [DC-Registry] Dublin Core Registry Working Group, <a href="http://www.mailbase.ac.uk/lists/dc-registry/">http://www.mailbase.ac.uk/lists/dc-registry/</a>. 
              </p>
              <p><a name="heery2000"></a><br>
                [Heery 2000] Rachel Heery, &quot;Application profiles: mixing 
                and matching metadata schemas,&quot; (expected publication date 
                20 September 2000). </p>
              <p><a name="househarman"></a><br>
                [House and Harman 1950] Homer C. House and Susan Emolyn Harman, 
                Descriptive English Grammar, Second Edition, Englewood Cliffs, 
                N.J.: Prentice-Hall, Inc. </p>
              <p><a name="myrdf"></a><br>
                [MyRDF] MyRDF [a software toolkit for RDF Schemas], <a href="http://rdf.dev.oclc.org/myrdf/">http://rdf.dev.oclc.org/myrdf/</a>. 
              </p>
              <p><a name="reedkellogg"></a><br>
                [Reed and Kellogg 1886] Alonso Reed and Brainerd Kellogg, Higher 
                lessons in English, New York: Clark and Maynard, 1886 [1877]; 
                Delmar (New York): Scholars' Facsimiles and Reprints, 1987. </p>
              <p><a name="rslp"></a><br>
                [RSLP] RSLP Collection Description Schema, <a href="http://www.ukoln.ac.uk/metadata/rslp/schema/">http://www.ukoln.ac.uk/metadata/rslp/schema/</a>. 
              </p>
              <p><a name="schemas"></a><br>
                [SCHEMAS] SCHEMAS: A Forum for Metadata Schema Implementers, <a href="http://www.schemas-forum.org/">http://www.schemas-forum.org</a>. 
              </p>
              <p><a name="w3c1999"></a><br>
                [W3C 1999] Ora Lassila and Ralph Swick, eds., &quot;Resource Description 
                Framework (RDF) Model and Syntax Specification,&quot; [W3C Recommendation], 
                <a href="http://www.w3.org/TR/REC-rdf-syntax/">http://www.w3.org/TR/1999/REC-rdf-syntax</a>. 
              </p>
              <p><a name="w3c2000"></a><br>
                [W3C 2000] Dan Brickley and R. V. Guha, eds., &quot;Resource Description 
                Framework (RDF) Schema Specification 1.0,&quot; [W3C Candidate 
                Recommendation], <a href="http://www.w3.org/TR/rdf-schema/">http://www.w3.org/TR/WD-rdf-schema</a>. 
              </p>
              <p><a name="warriner1973"></a><br>
                [Warriner et al. 1973] John E. Warriner et al., English Grammar 
                and Composition, Third course, New York: Harcourt Brace Jovanovich, 
                Inc. </p>
            </TD>
            <TD WIDTH="2%" BGCOLOR="#FFFFCC" height="9307">&nbsp;</TD>
</TR>
<TR>
<TD WIDTH="2%" BGCOLOR="#FFFFCC">&nbsp;</TD>
<TD WIDTH="96%" VALIGN="TOP" BGCOLOR="#FFFFCC" ALIGN="CENTER"><!-- #BeginLibraryItem "/Library/bottom menu.lbi" --><HR SIZE="1" noshade><A HREF="../../index.htm"><B>Home</B></A>&nbsp;| <A HREF="../../search/index.htm"><B>Search</B></A>&nbsp;| 
<A HREF="../../sitemap/index.htm"><B>Site&nbsp;Map</B></A>&nbsp;| <A HREF="../../news/index.htm"><B>What's 
New</B></A>&nbsp;| <A HREF="../../feedback/index.htm"><B>Feedback</B></A>&nbsp;| 
<A HREF="../../about/index.htm"><B>About&nbsp;the&nbsp;Dublin&nbsp;Core</B></A>&nbsp;| 
<A HREF="../../news/index.htm"><B>News&nbsp;and&nbsp;Publications</B></A>&nbsp;| 
<A HREF="../index.htm"><B>Documents</B></A>&nbsp;| <A HREF="../../education/index.htm"><B>Questions&nbsp;and&nbsp;Answers</B></A>&nbsp;| 
<A HREF="../../projects/index.htm"><B>Projects</B></A>&nbsp;| <A HREF="../../tools/index.htm"><B>Tools</B></A>&nbsp;| 
<A HREF="../../groups/index.htm"><B>Working&nbsp;Groups</B></A>&nbsp;| <A HREF="../../about/workshop.htm"><B>Workshop&nbsp;Series</B></A><!-- #EndLibraryItem --></TD>
<TD WIDTH="2%" BGCOLOR="#FFFFCC">&nbsp;</TD>
</TR>
<TR>
            <TD WIDTH="2%" BGCOLOR="#FFFFCC" height="39">&nbsp;</TD>
            <TD WIDTH="96%" BGCOLOR="#FFFFCC" height="39">&nbsp;</TD>
            <TD WIDTH="2%" BGCOLOR="#FFFFCC" height="39">&nbsp;</TD>
</TR>
</TABLE>
<TR>
<TD height="2"><!-- #BeginLibraryItem "/Library/_bottom copyright table.lbi" --><table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr><td height="20" width="100%" bgcolor="#000000" align="RIGHT"><!-- #BeginLibraryItem "/Library/copyright info bottom.lbi" --><font color="#FFFFCC"><i>&copy; 2000 DCMI&nbsp;</i></font><!-- #EndLibraryItem -->&nbsp;</td></tr>
</table><!-- #EndLibraryItem --></TD>
</TR>
</TABLE>
</DIV>
</BODY>
</HTML>