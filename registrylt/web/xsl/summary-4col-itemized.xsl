<?xml version="1.0" encoding='UTF-8'?> <xsl:stylesheet version="1.0"  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"  xmlns:dc="http://purl.org/dc/elements/1.1/"  xmlns:dcq="http://purl.org/dc/terms/"  xmlns:terms="http://dublincore.org/dcregistrylt/terms/"  xmlns:docs="http://dublincore.org/dcregistrylt/documents/"  xmlns:trans="http://dublincore.org/dcregistrylt/translations/"  xmlns:java="java" ><xsl:output method="html" doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" /><xsl:include href="banner.xsl"/><xsl:include href="searchForm.xsl"/><xsl:include href="footer.xsl"/>	<xsl:include href="_url_encode.xsl"/><xsl:variable name="reqType" select="'summary'"/><xsl:variable name="action" select="'navigate'"/><xsl:variable name="strs" select="document('../xml/translations.xml')/strings/lang[@RFC3066=$uiLang]"/><xsl:variable name="PI" select="processing-instruction('params')" /><xsl:variable name="modelSize" select="substring-before(substring-after($PI, 'modelSize=&#034;'), '&#034;')" /><xsl:variable name="uiLang" select="substring-before(substring-after($PI, 'uiLang=&#034;'), '&#034;')" /><xsl:variable name="rdf" select="'http://www.w3.org/1999/02/22-rdf-syntax-ns#'" /><xsl:variable name="rdfs" select="'http://www.w3.org/2000/01/rdf-schema#'"/><xsl:variable name="dc" select="'http://purl.org/dc/elements/1.1/'" /><xsl:variable name="dcq" select="'http://purl.org/dc/terms/'" /><xsl:variable name="dctype" select="'http://purl.org/dc/dcmitype/'" /><xsl:template match="rdf:RDF">	<html>	<head>		<title>The Open Metadata Registry</title>		<link type="text/css" rel="stylesheet" href="/dcregistrylt/css/default.css" />	</head>	<body>	<xsl:call-template name="banner">		<xsl:with-param name="action" select="$action" />		<xsl:with-param name="uiLang" select="$uiLang" />	</xsl:call-template>		<xsl:call-template name="searchForm">		<xsl:with-param name="action" select="$action" />		<xsl:with-param name="reqType" select="$reqType" />	</xsl:call-template>		<table cellspacing="0" width="100%" class="noborder">	<tr><td align="right">	<b><xsl:value-of select="$strs/str[@name='items_found']"/>&#160;<xsl:value-of select="$modelSize"/></b>	</td></tr>	</table>				<xsl:apply-templates select="//rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/elements/']"/>	<xsl:apply-templates select="//rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/refinements/']"/>	<xsl:apply-templates select="//rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/controlled/']"/>	<xsl:apply-templates select="//rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/encoding/']"/>	<xsl:apply-templates select="//rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/other/']"/>	<xsl:apply-templates select="//rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/collections/']"/>		<p />	<xsl:call-template name="footer" />	</body>	</html></xsl:template><xsl:template match="rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/elements/']">		<xsl:variable name="item_count">		<xsl:value-of select="count(./*)-1"/>	</xsl:variable>		<table cellspacing="0" width="100%" class="border">	<tr><th colspan="4">	<xsl:value-of disable-output-escaping='yes' select="$strs/str[@name='elements']"/>&#160;(<xsl:value-of select="$item_count"/>)	</th></tr>		<xsl:for-each select="*[substring(local-name(),1,1)='_'][position() mod 4 = 1]">		<tr>		<xsl:apply-templates select ="./@rdf:resource | following-sibling::*[position() &lt; 4]/@rdf:resource" />		</tr>	</xsl:for-each>		</table>	</xsl:template><xsl:template match="rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/refinements/']">		<xsl:variable name="item_count">		<xsl:value-of select="count(./*)-1"/>	</xsl:variable>		<table cellspacing="0" width="100%" class="border">	<tr><th colspan="4">	<xsl:value-of disable-output-escaping='yes' select="$strs/str[@name='refinements']"/>&#160;(<xsl:value-of select="$item_count"/>)	</th></tr>		<xsl:for-each select="*[substring(local-name(),1,1)='_'][position() mod 4 = 1]">		<tr>		<xsl:apply-templates select ="./@rdf:resource | following-sibling::*[position() &lt; 4]/@rdf:resource" />		</tr>	</xsl:for-each>		</table>	</xsl:template><xsl:template match="rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/controlled/']">		<xsl:variable name="item_count">		<xsl:value-of select="count(./*)-1"/>	</xsl:variable>		<table cellspacing="0" width="100%" class="border">	<tr><th colspan="4">	<xsl:value-of disable-output-escaping='yes' select="$strs/str[@name='controlledTerms']"/>&#160;(<xsl:value-of select="$item_count"/>)	</th></tr>		<xsl:for-each select="*[substring(local-name(),1,1)='_'][position() mod 4 = 1]">		<tr>		<xsl:apply-templates select ="./@rdf:resource | following-sibling::*[position() &lt; 4]/@rdf:resource" />		</tr>	</xsl:for-each>		</table>	</xsl:template><xsl:template match="rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/encoding/']">		<xsl:variable name="item_count">		<xsl:value-of select="count(./*)-1"/>	</xsl:variable>		<table cellspacing="0" width="100%" class="border">	<tr><th colspan="4">	<xsl:value-of disable-output-escaping='yes' select="$strs/str[@name='encodingSchemes']"/>&#160;(<xsl:value-of select="$item_count"/>)	</th></tr>		<xsl:for-each select="*[substring(local-name(),1,1)='_'][position() mod 4 = 1]">		<tr>		<xsl:apply-templates select ="./@rdf:resource | following-sibling::*[position() &lt; 4]/@rdf:resource" />		</tr>	</xsl:for-each>		</table>	</xsl:template><xsl:template match="rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/other/']">		<xsl:variable name="item_count">		<xsl:value-of select="count(./*)-1"/>	</xsl:variable>		<table cellspacing="0" width="100%" class="border">	<tr><th colspan="4">	<xsl:value-of disable-output-escaping='yes' select="$strs/str[@name='other']"/>&#160;(<xsl:value-of select="$item_count"/>)	</th></tr>		<xsl:for-each select="*[substring(local-name(),1,1)='_'][position() mod 4 = 1]">		<tr>		<xsl:apply-templates select ="./@rdf:resource | following-sibling::*[position() &lt; 4]/@rdf:resource" />		</tr>	</xsl:for-each>		</table>	</xsl:template><xsl:template match="rdf:Description[@rdf:about='http://dublincore.org/dcregistrylt/collections/']">		<xsl:variable name="item_count">		<xsl:value-of select="count(./*)-1"/>	</xsl:variable>		<table cellspacing="0" width="100%" class="border">	<tr><th>	<xsl:value-of disable-output-escaping='yes' select="$strs/str[@name='collections']"/>&#160;(<xsl:value-of select="$item_count"/>)	</th></tr>					<xsl:for-each select="./*">		<xsl:if test="substring(local-name(),1,1)='_'">			<xsl:call-template name="print-remote-links">				<xsl:with-param name="item" select="@rdf:resource"/>				<xsl:with-param name="display_value" select="@rdf:resource"/>			</xsl:call-template>		</xsl:if>	</xsl:for-each>		</table>	</xsl:template><xsl:template match="*/@rdf:resource">	<xsl:variable name="item">		<xsl:value-of select="."/>	</xsl:variable>	<xsl:variable name="encoded_item">		<xsl:call-template name="_url_encode">			<xsl:with-param name="url" select="$item"/>		</xsl:call-template>	</xsl:variable>		<td width="25%">	<a><xsl:attribute name="HREF"><xsl:value-of select="concat('/dcregistrylt/detailServlet?reqType=detail', '&amp;', 'item=', $encoded_item)"/></xsl:attribute>	<xsl:choose>				<xsl:when test="contains($item, $dc)">			<xsl:choose>				<xsl:when test="string-length($item) > string-length($dc)">					<xsl:value-of select="substring-after($item, $dc)"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="$item"/>								</xsl:otherwise>			</xsl:choose>		</xsl:when>		<xsl:when test="contains($item, $dcq)">			<xsl:choose>				<xsl:when test="string-length($item) > string-length($dcq)">					<xsl:value-of select="substring-after($item, $dcq)"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="$item"/>								</xsl:otherwise>			</xsl:choose>		</xsl:when>		<xsl:when test="contains($item, $dctype)">			<xsl:choose>				<xsl:when test="string-length($item) > string-length($dctype)">					<xsl:value-of select="substring-after($item, $dctype)"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="$item"/>								</xsl:otherwise>			</xsl:choose>		</xsl:when>		<xsl:otherwise>			<xsl:value-of select="$item"/>						</xsl:otherwise>	</xsl:choose>	</a>	</td>	</xsl:template><xsl:template name="print-terms">	<xsl:param name="item"/>	<xsl:variable name="encoded_item">		<xsl:call-template name="_url_encode">			<xsl:with-param name="url" select="$item"/>		</xsl:call-template>	</xsl:variable>		<td>	<a><xsl:attribute name="HREF"><xsl:value-of select="concat('/dcregistrylt/detailServlet?reqType=detail', '&amp;', 'item=', $encoded_item)"/></xsl:attribute>	<xsl:choose>				<xsl:when test="contains($item, $dc)">			<xsl:choose>				<xsl:when test="string-length($item) > string-length($dc)">					<xsl:value-of select="substring-after($item, $dc)"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="$item"/>								</xsl:otherwise>			</xsl:choose>		</xsl:when>		<xsl:when test="contains($item, $dcq)">			<xsl:choose>				<xsl:when test="string-length($item) > string-length($dcq)">					<xsl:value-of select="substring-after($item, $dcq)"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="$item"/>								</xsl:otherwise>			</xsl:choose>		</xsl:when>		<xsl:when test="contains($item, $dctype)">			<xsl:choose>				<xsl:when test="string-length($item) > string-length($dctype)">					<xsl:value-of select="substring-after($item, $dctype)"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="$item"/>								</xsl:otherwise>			</xsl:choose>		</xsl:when>		<xsl:otherwise>			<xsl:value-of select="$item"/>						</xsl:otherwise>	</xsl:choose>	</a>	</td>	</xsl:template><xsl:template name="print-remote-links">	<xsl:param name="item"/>	<xsl:param name="display_value"/>	<xsl:param name="display_provenance_link" select="'Y'"/>	<xsl:variable name="encoded_item">		<xsl:call-template name="_url_encode">			<xsl:with-param name="url" select="$item"/>		</xsl:call-template>	</xsl:variable>		<tr><td>	<a><xsl:attribute name="HREF"><xsl:value-of select="concat('/dcregistrylt/detailServlet?reqType=detail', '&amp;', 'item=', $encoded_item, '&amp;', 'display_provenance_link=', $display_provenance_link)"/></xsl:attribute>	<xsl:value-of select="$display_value"/>	</a></td></tr>	</xsl:template></xsl:stylesheet>