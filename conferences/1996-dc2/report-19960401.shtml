<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head >
    <meta name="generator" content="HTML Tidy, see www.w3.org" />
    <title>DCMI Workshops - DC2: A Syntax for Dublin Core Metadata</title>
    <meta http-equiv="Content-Type"
    content="text/html; charset=iso-8859-1" />
    <link rel="meta" href="report-19960401.shtml" />
    <link rel="stylesheet" href="/css/default.css"
    type="text/css" />
<script src="/js/default.js" type="text/javascript">
</script>
  </head>

  <body >
    <!--#include virtual="/ssi/header.shtml" -->

    <h1>A Syntax for Dublin Core Metadata</h1>

    <h2>Recommendations from the Second Metadata Workshop<br />
    </h2>
    <hr />

    <p><strong>Lou Burnard, Eric Miller, Liam Quin, and C.M.
    Sperberg-McQueen<br />
    </strong></p>
    <hr />

    <h2>Table of Contents</h2>

    <ul>
      <li><strong><a href="#sec1.0">1 Requirements</a></strong></li>

      <li>
        <strong><a href="#sec2.0">2 Summary of proposals</a></strong> 

        <ul>
          <li><strong><a href="#sec2.1">2.1 The minimal effort
          approach</a></strong></li>

          <li>
            <strong><a href="#sec2.2">2.2 Keeping the metadata at
            arms-length</a></strong> 

            <ul>
              <li><strong><a href="#sec2.2.1">2.2.1 Mapping Dublin
              Core elements to HTML</a></strong></li>

              <li><strong><a href="#sec2.2.2">2.2.2 Using a
              Dublin-Core specific syntax</a></strong></li>
            </ul>
          </li>

          <li><strong><a href="#sec2.3">2.3 The Warwick Framework
          DTD</a></strong></li>
        </ul>
      </li>

      <li><strong><a href="#sec3.0">3 The Dublin Core DTD
      fragment</a></strong></li>

      <li>
        <strong><a href="#sec4.0">4 The Warwick Framework DTD
        fragment</a></strong> 

        <ul>
          <li><strong><a href="#sec4.1">4.1 Containers and
          packages</a></strong></li>

          <li><strong><a href="#sec4.2">4.2 Package
          components</a></strong></li>
        </ul>
      </li>
    </ul>
    <hr />

    <p>This document summarizes a set of recommendations concerning
    the representation of metadata, derived from discussion within
    the syntax working group which met at the second Metadata
    Workshop, held at Warwick University in April 1996. The
    discussion begun in Warwick has been continued electronically
    by the current authors, and this paper presents both the
    recommendations agreed on by the syntax working group in
    Warwick and some further developments for which the authors
    alone are responsible.</p>

    <p>In brief, the syntax working group recommended:</p>

    <ul>
      <li>that recommendations be made showing how to use the HTML
      &lt;meta&gt; element for Dublin-Core metadata (as described
      below in section <a href="#sec2.1">2.1 The minimal effort
      approach</a> and section <a href="#sec2.2">2.2 Keeping the
      metadata at arms-length</a>.</li>

      <li>that a standard canonical syntax be defined for
      Dublin-Core metadata, using SGML syntax. The working group
      defined no DTD, but a possible DTD devised by the authors is
      given below in section <a href="#sec2.3">3 The Dublin Core DTD
      fragment</a>.</li>
    </ul>

    <p>Discussions in Warwick also led to an informal demonstration
    of how SGML could be used as the mechanism for encoding the
    containers and metadata packages foreseen in the Warwick
    Framework. A sample DTD for such packages is given in section
    <a href="#sec4.0">4 The Warwick Framework DTD fragment</a>.</p>

    <h2><a id="sec1.0" name="sec1.0"></a>1 Requirements</h2>

    <p>The following criteria were advanced as desirable features
    in whatever syntax is to be used in defining a standard format
    for metadata:</p>

    <ul>
      <li>ability to express optional, repeatable, sequences</li>

      <li>verifiability, robustness</li>

      <li>compactness</li>

      <li>uniformity</li>

      <li>ability to express of qualifiers</li>

      <li>repeatability of groups</li>

      <li>machine processability and human comprehensibility</li>

      <li>internationalizability</li>

      <li>simplicity</li>

      <li>formality</li>
    </ul>

    <p>The following functional requirements were identified for
    the syntax:</p>

    <ul>
      <li>it should be simple enough for authors to create their
      own metadata (either directly or via a suitable
      interface)</li>

      <li>it must be able to represent at least the elements of the
      Dublin core</li>

      <li>it must support extension by users, with varying degrees
      of formality and control, so that users can extend the Dublin
      core</li>

      <li>it must be able to express attribute-value-scheme
      triplets (since the metadata elements are all expressed as
      such)</li>

      <li>it must be able to express optionality and
      repeatability</li>
    </ul>

    <p>The ability to carry out down-translation to the proposed
    scheme from existing metadata schemes (specifically richer
    formats such as MARC, TEI, IAFA templates) was assumed.</p>

    <p>There was no discussion of how the following additional
    requirements might be achieved, though there was a general
    feeling that they were all highly desirable:</p>

    <ul>
      <li>mechanisms (such as a name registry) for constraining the
      range of some or all possible attribute names and values</li>

      <li>mechanisms for grouping sub-parts of a specifications,
      e.g. to express the object/instance distinction</li>

      <li>mechanisms for specifying the meaning of repeated
      sub-parts of a specification, e.g. whether two &lt;form&gt;
      components should be regarded as exclusive (copy in one of
      two forms) or additive (copy in both forms).</li>
    </ul>

    <p>The problem of grouping, inheritance, and their meaning is
    discussed further in a paper by C. M. Sperberg-McQueen, "On
    Information Factoring in Dublin Metadata Records," which is
    accessible on the World-Wide Web at <a
    href="http://www.uic.edu/%7Ecmsmcq/tech/metadata.factoring.html">
    http://www.uic.edu/~cmsmcq/tech/metadata.factoring.html</a>
    .</p>

    <h2><a id="sec2.0" name="sec2.0"></a>2 Summary of proposals</h2>

    <p>This section presents the various possible approaches
    discussed at the workshop, whether actively recommended by the
    syntax working group or not. A fuller treatment of some of them
    is also presented in a paper written by Eric Miller following
    the first Metadata Workshop (see <em>Issues of Document
    Description in HTML</em>, available at <a
    href="http://www.oclc.org/oclc/research/publications/review95/part1/html.htm">
    http://www.oclc.org/oclc/research/publications/review95/part1/html</a>).</p>

    <h3><a id="sec2.1" name="sec2.1"></a>2.1 The minimal effort
    approach</h3>

    <p>The syntax working group recommended that authors,
    publishers, and site managers be encouraged to provide metadata
    in HTML documents by means of HTML &lt;<em>meta</em>&gt;
    elements embedded in their documents. More elaborate metadata
    can be provided if the metadata records are external to the
    HTML document, as described below, but for information
    providers with limited ambitions, the method described here is
    recommended.</p>

    <p>The assumption here is that existing browsers and search
    engines cannot be expected to accommodate any variation from
    current practice. Any additional features must be transparent
    to existing software and authoring practices. The
    &lt;<em>meta</em>&gt; element of HTML2 should be used, with
    <em>name</em> and <em>content</em> attributes set to the
    metadata element's name and value respectively.</p>

    <p>Example:<br />
    </p>
<pre>
&lt;html&gt;<br />
&lt;head&gt;<br />
&lt;title&gt;On the pulse of the morning&lt;/title&gt;<br />
&lt;meta name="title" content="On the pulse of the morning"&gt;<br />
&lt;meta name="publisher content="University of Virginia Electronic Text Center"&gt;<br />
&lt;meta name="otheragent:transcriber"<br />
      content="University of Virginia Electronic Text Center"&gt;<br />
&lt;meta name='date(ISO)' content="1993-01-23"&gt;<br />
&lt;meta name="objectType" content="poem"&gt;<br />
&lt;meta name="form" content="1 ASCII file"&gt;<br />
&lt;meta name="form(IMT)" content="text/ASCII"&gt;<br />
&lt;meta name="source"<br />
      content="Newspaper stories and oral performance of text at the<br />
       Presidential inauguration of Bill Clinton"&gt;<br />
&lt;meta name="language(ISO 639)" content="en"&gt;<br />
 ...<br />
&lt;/head&gt;<br />
&lt;body&gt;<br />
&lt;h1&gt;On the pulse of the morning&lt;/h1&gt;<br />
 ...
</pre>

    <p>Advantages: No change is needed to existing browsers or
    search engines. Any set of attribute-value pairs can be
    represented.</p>

    <p>Disadvantages: No constraint can be imposed on the semantics
    of the attribute names used, and name clashes may occur. Other,
    possibly inconsistent, conventions are already established for
    use of the &lt;<em>meta</em>&gt; elements by other agents. This
    could however be overcome by using a prefix such as "DC:",
    e.g.</p>
<pre>
&lt;meta name='DC:date(ISO)' content="1993-01-23"&gt;
</pre>

    <p>The order of &lt;<em>meta</em>&gt; elements within the
    &lt;<em>head</em>&gt; element is not significant, and elements
    cannot be grouped, though a sufficiently determined imagination
    might conceive of something like the following:</p>
<pre>

&lt;meta name='DC:groupStart' content='group number 42'&gt;<br />
   &lt;meta name='DC:something' content="something else"&gt;<br />
   &lt;!-- more metas here --&gt;<br />
&lt;meta name='DC:groupEnd' content= 'group number 42'&gt;
</pre>

    <p>Miller's paper, referred to above, also suggests prefixing a
    group of &lt;<em>meta</em>&gt; tags which together make up a
    metadata description of this kind with a particular labelling
    &lt;<em>meta</em>&gt; tag such as<br />
    </p>
<pre>
&lt;meta name='citation' content="Dublin Core"&gt;
</pre>

    <p>Without additional attributes such as <em>source</em> and
    <em>type</em>, considerable `overloading' of the attribute
    values is necessary to contain all the information available in
    the Dublin core. Even in this trivial example, it has been
    necessary to introduce some arbitrary syntax (the use of the
    colon and parentheses) to distinguish parts of the
    <em>name</em> attribute. Furthermore, attribute values are
    limited in length by the value of LITLEN (1024 according to the
    official SGML declaration for HTML2), or by other arbitrary
    limits imposed by particular browsers. A literal cannot contain
    any tags which a browser might recognize, so another syntax
    must be invented if subfields of Dublin core elements are
    required.</p>

    <h3><a id="sec2.2" name="sec2.2"></a>2.2 Keeping the metadata at
    arms-length</h3>

    <p>For more complex metadata records, an unstructured series of
    &lt;meta&gt; elements will not suffice; the syntax working
    group recommended, therefore, that metadata consumers recognize
    references to external metadata from within the HTML
    &lt;<em>head</em>&gt; element.</p>

    <p>This approach involves keeping the metadata in an distinct
    document. Because the metadata is independent of the form of
    the data proper, free-standing metadata can document with equal
    facility documents in HTML, ASCII, SGML, PDF, or proprietary
    formats, images, sound files, maps, etc. Clear endorsement of
    free-standing metadata, and the construction of metadata
    catalogs, is thus important for ensuring that metadata is
    usable for objects on the net which are not also objects on
    WWW.</p>

    <p>Two variants of the encoding syntax for metadata were
    discussed at the meeting: in the first, the metadata document
    uses existing HTML elements. In the second it uses some other
    syntax better suited to the requirements listed above. At the
    Warwick meeting, the workgroup agreed that this syntax should
    be expressed using an SGML DTD, and this is the approach which
    has been followed below. However, there is no reason why some
    other syntax that meets the functional requirements outlined
    above could not be invented for this purpose.</p>

    <p>A one-way linkage in HTML documents, for example, is
    effected using the &lt;<em>link</em>&gt; element:</p>
<pre>
&lt;html&gt;<br />
&lt;head&gt;<br />
&lt;link rel='metadata'<br />
      href='pulse.meta'&gt;<br />
&lt;/head&gt;<br />
 ...<br />
&lt;/html&gt; 
              
</pre>

    <p>Separating the metadata from the document makes it easy for
    existing browsers and search engines to ignore it if they wish,
    while those which are Dublin core-aware can access and process
    it effectively with no additional cost. On the other hand,
    there may be significant additional costs in ensuring that
    metadata and data are kept in step and consistent.</p>

    <p>The next two sections discuss what exactly might be the
    contents of the object referenced by <em>pulse.meta</em>.</p>

    <h4><a id="sec2.2.1" name="sec2.2.1"></a>2.2.1 Mapping Dublin Core
    elements to HTML</h4>

    <p>The attribute-value-class triples needed for the Dublin core
    can be mapped on to any appropriate HTML element. At the
    meeting, the &lt;<em>DL</em>&gt; element was suggested, as in
    the following example:</p>
<pre>
&lt;html&gt;<br />
&lt;head&gt;&lt;title&gt;Metadata for the Nice Pome&lt;/title&gt;&lt;/head&gt;<br />
&lt;body&gt;<br />
&lt;dl&gt;<br />
&lt;dt&gt;title&lt;/dt&gt;<br />
&lt;dd&gt;On the pulse of the morning&lt;/dd&gt;<br />
&lt;dt&gt;publisher&lt;/dt&gt;<br />
&lt;dd&gt;University of Virginia Electronic Text Center&lt;/dd&gt;<br />
&lt;dt&gt;otheragent:transcriber&lt;/dt&gt;<br />
&lt;dd&gt;University of Virginia Electronic Text Center&lt;/dd&gt;<br />
&lt;dt&gt;date:created/ISO&lt;/dt&gt;<br />
&lt;dd&gt;1993-01-23&lt;/dd&gt;<br />
&lt;dt&gt;objectType&lt;/dt&gt;<br />
&lt;dd&gt;poem&lt;/dd&gt;<br />
&lt;dt&gt;form&lt;/dt&gt;<br />
&lt;dd&gt;1 ASCII file&lt;/dd&gt;<br />
&lt;dt&gt;form/IMT&lt;/dt&gt;<br />
&lt;dd&gt;text/ASCII&lt;/dd&gt;<br />
&lt;dt&gt;source&lt;/dt&gt;<br />
&lt;dd&gt;Newspaper stories and oral performance of text at the Presidential<br />
inauguration of Bill Clinton&lt;/dd&gt;<br />
&lt;dt&gt;language/ISO 639&lt;/dt&gt;<br />
&lt;dd&gt;en&lt;/dd&gt;<br />
&lt;/dl&gt;<br />
&lt;/html&gt;
</pre>
    Advantages: Metadata is cleanly separated from the data.
    Problems consequent on using attribute values to represent
    element content are no longer a concern and more powerful
    structuring abilities (e.g. nesting, repetition) are
    potentially available. 

    <p>Disadvantages: Almost anything can go into a metadata
    description. (Unenforceable) conventions need to be established
    about how the metadata descriptions are to be mapped to HTML
    elements. It's not clear how, for example, to do the SOURCE and
    TYPE attributes of the Dublin Core without extending HTML2.</p>

    <p>This suggested approach did not gain much support from the
    syntax working group and is not recommended.</p>

    <h4><a id="sec2.2.2" name="sec2.2.2"></a>2.2.2 Using a Dublin-Core
    specific syntax</h4>

    <p>The syntax working group recommended the preparation of an
    SGML DTD for Dublin-Core metadata records; one such DTD is
    described below in section <a href="#sec3.0">3 The Dublin Core DTD
    fragment</a>. The Dublin DTD defines specific elements for the
    13 core elements, each of which bears attributes for
    <em>type</em> and <em>source</em>.</p>

    <p>Using this syntax, the above example might like look
    this:</p>
<pre>
&lt;!DOCTYPE dublinCore PUBLIC '-//OCLC//DTD Dublin core v.1//EN'&gt;<br />
&lt;dublinCore&gt;<br />
  &lt;title&gt;On the Pulse of Morning&lt;/title&gt;<br />
  &lt;author&gt;Maya Angelou&lt;/author&gt;<br />
  &lt;publisher&gt;University of Virginia Electronic Text Center&lt;/publisher&gt;<br />
  &lt;otherAgent name='transcriber'&gt;University of Virginia Electronic Text<br />
   Center&lt;/otherAgent&gt;<br />
  &lt;date name='created' scheme='ISO'&gt;1993-01-23&lt;/date&gt;<br />
  &lt;objectType&gt;poem&lt;/objectType&gt;<br />
  &lt;form&gt;1 ASCII file&lt;/form&gt;<br />
  &lt;form scheme='IMT'&gt;text/ASCII&lt;/form&gt;<br />
  &lt;source&gt;Newspaper stories and oral performance of text at the<br />
    Presidential inauguration of Bill Clinton&lt;/source&gt;<br />
  &lt;language name='ISO 639'&gt;en&lt;/language&gt;<br />
&lt;/dublinCore&gt;
</pre>

    <p>Advantages: The syntax makes explicit the semantics of each
    Dublin core element. Distinct attributes can be defined for
    scheme and type. Element content could include other tags if
    subfields are required.</p>

    <p>Disadvantages: Only Dublin core elements are provided (but
    there is an extension field). Discrete packages of metadata
    cannot be identified and the semantics of repeated elements are
    not specified.</p>

    <h3><a id="sec2.3" name="sec2.3"></a>2.3 The Warwick Framework
    DTD</h3>

    <p>At the workshop, the authors suggested applying SGML not
    only to the encoding of Dublin-Core records but also to the
    creation of metadata <em>packages</em> and <em>containers</em>,
    as defined in the architectural proposals for the Warwick
    Framework. This section summarizes the relevant points.</p>

    <p>The Warwick Framework DTD builds on the notion of discrete
    packages of metadata elements discussed at the Warwick
    Workshop. One such package might contain Dublin core elements;
    others might contain specialised elements appropriate to other
    kinds of metadata, or references to other components using
    other (possibly non-SGML) notations.</p>

    <p>No specific package types additional to the Dublin core were
    discussed in any detail; though it seems likely that other
    groups will wish to define them. This can be done relatively
    easily by defining an additional DTD fragment (along the lines
    of that discussed below). Alternatively, new package types can
    also be created by using a generic package type called a
    &lt;<em>package</em>&gt;, composed of typed
    &lt;<em>metaData</em>&gt; or nestable
    &lt;<em>metaGroup</em>&gt; elements. This may be easier to
    define (and avoids possible namespace clashes). Full details of
    these are given below in section <a href="#sec4.0">4 The Warwick
    Framework DTD fragment</a>.</p>

    <p>This approach was explored in some detail by the authors in
    order to demonstrate that the additional syntax and
    functionality required by the `container' approach could be
    supported directly by SGML, with no need to invent a new syntax
    and consequently additional ad hoc software.</p>

    <p>A collection of packages of the same or different types
    makes up a &lt;<em>container</em>&gt; element. This could be
    linked to from an HTML document in the same way as in the
    preceding examples (using a &lt;<em>link</em>&gt; element in
    the HTML document), or form a part of a multipart MIME message
    along with the document itself. An example might look like the
    following:</p>
<pre>
&lt;!DOCTYPE container PUBLIC '-//OCLC//DTD Warwick Framework Demo v.1//EN'&gt;<br />
&lt;container&gt;<br />
<br />
&lt;dublinCore&gt;<br />
  &lt;!-- etc. as in preceding example --&gt;<br />
&lt;/dublinCore&gt;<br />
<br />
&lt;package URI='hdl:oclc:repository/tc'<br />
         name='OCLC Standard Terms and Conditions / Set FPC45'<br />
         version='1.0'&gt;<br />
 &lt;metadata name='permit'&gt;www.oclc.org<br />
 &lt;metadata name='permit'&gt;rsch.oclc.org<br />
 &lt;metadata name='permit'&gt;lou@vax.ox.ac.uk<br />
 &lt;metadata name='deny'&gt;dev.oclc.org<br />
 &lt;metadata name='inquiries'&gt;stu@oclc.org<br />
&lt;/package&gt;<br />
<br />
&lt;/container&gt;              
</pre>

    <h2><a id="sec3.0" name="sec3.0"></a>3 The Dublin Core DTD
    fragment<br />
    </h2>

    <p>This DTD fragment, prepared by the authors, is a slightly
    simplified version of that proposed in the paper by Miller
    cited above. It defines the following metadata elements, one
    for each of the components of the Dublin Core, as defined at
    the first Metadata Workshop:</p>

    <ul>
      <li>
        title 

        <ul>
          <li>The name of the object, if it has one.</li>
        </ul>
      </li>

      <li>
        author 

        <ul>
          <li>Name of the persons and organizations primarily
          responsible for the intellectual content of the resouce.
          Encode one name per element.</li>
        </ul>
      </li>

      <li>
        otherAgent 

        <ul>
          <li>Other person(s) and/or organization(s) who have made
          a significant contribution to the resource. The value of
          this element should follow the guidelines for the
          &lt;<em>author</em>&gt; element. The <em>author</em> and
          <em>publisher</em> elements are semantically equivalent
          to instances of this element with the values
          "<em>author</em>" and "<em>publisher</em>" for their type
          attributes respectively.</li>
        </ul>
      </li>

      <li>
        publisher 

        <ul>
          <li>The agent or agency responsible for making the
          resource available. The value of this element should
          follow the guidelines for the &lt;<em>author</em>&gt;
          element.</li>
        </ul>
      </li>

      <li>
        date 

        <ul>
          <li>The date of publication in any format (as indicated
          by the scheme attribute).</li>
        </ul>
      </li>

      <li>
        subject 

        <ul>
          <li>The field of knowledge to which the resource belongs,
          typically indicated as a series of keywords, possibly
          taken from a controlled vocabulary as indicated by the
          <em>scheme</em> attribute.</li>
        </ul>
      </li>

      <li>
        objectType 

        <ul>
          <li>The abstract category of the resource, such as
          article, image, dictionary, etc.</li>
        </ul>
      </li>

      <li>
        form 

        <ul>
          <li>The particular data representation of the resource.
          Typically this will be an Internet Media Type (formerly
          known as MIME content type).</li>
        </ul>
      </li>

      <li>
        identifier 

        <ul>
          <li>String or number used to uniquely identify this
          resource, for example a URN, or identification number
          used by some other scheme.</li>
        </ul>
      </li>

      <li>
        relation 

        <ul>
          <li>Relationship of this resource to another resource.
          This element should specify what the relationship is
          (using the <em>type</em> attribute)</li>
        </ul>
      </li>

      <li>
        source 

        <ul>
          <li>Objects, either electronic or printed, from which
          this resource was derived. This is a special case of the
          &lt;<em>relation</em>&gt; element.</li>
        </ul>
      </li>

      <li>
        language 

        <ul>
          <li>The natural language(s) of the resource. When more
          than one &lt;<em>language</em>&gt; element is specified,
          it indicates that more than one language is used to a
          significant degree in the work. No inference should be
          made about the relative proportions of language content
          based on the order of appearence of such elements.</li>
        </ul>
      </li>

      <li>
        coverage 

        <ul>
          <li>The spatial extent and/or temporal duration
          characteristic of the resource, e.g. "19th Century
          France".</li>
        </ul>
      </li>
    </ul>

    <p>These elements all share the following attributes:</p>

    <ul>
      <li>
        type 

        <ul>
          <li>optionally identifies a subcategorization of the
          metadata</li>
        </ul>
      </li>

      <li>
        scheme 

        <ul>
          <li>identifies the domain or naming scheme from which
          categorizations are taken</li>
        </ul>
      </li>
    </ul>

    <p>No closed set of values is defined for either of these
    attributes in the present proposal, though some suggestive
    examples are to be found in Miller's paper cited above.</p>

    <p>These elements and attributes are formally defined as
    follows:</p>
<pre>
&lt;!ENTITY % a.global '<br />
          type               CDATA               #IMPLIED<br />
          scheme             CDATA               "uncontrolled"'&gt;<br />
<br />
&lt;!ELEMENT title         - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST title              %a.global                          &gt;<br />
&lt;!ELEMENT author        - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST author             %a.global                          &gt;<br />
&lt;!ELEMENT otherAgent    - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST otherAgent         %a.global                          &gt;<br />
&lt;!ELEMENT publisher     - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST publisher          %a.global                          &gt;<br />
&lt;!ELEMENT date          - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST date               %a.global                          &gt;<br />
&lt;!ELEMENT subject       - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST subject            %a.global                          &gt;<br />
&lt;!ELEMENT objectType    - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST objectType         %a.global                          &gt;<br />
&lt;!ELEMENT form          - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST form               %a.global                          &gt;<br />
&lt;!ELEMENT identifier    - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST identifier         %a.global                          &gt;<br />
&lt;!ELEMENT relation      - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST relation           %a.global                          &gt;<br />
&lt;!ELEMENT source        - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST source             %a.global                          &gt;<br />
&lt;!ELEMENT language      - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST language           %a.global                          &gt;<br />
&lt;!ELEMENT coverage      - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST coverage           %a.global                          &gt;<br />
&lt;!ELEMENT metadata      - O  (#PCDATA)                          &gt;<br />
&lt;!ATTLIST metadata           %a.global                          &gt;
</pre>

    <p><br />
    The &lt;<em>metadata</em>&gt; element is described in more
    detail below, in section <a href="#sec4.0">4 The Warwick Framework
    DTD fragment</a>.<br />
    Any number of any of the above elements may be grouped together
    to form a single Dublin core metadata description. Such a
    description is contained by a single
    &lt;<em>dublinCore</em>&gt; element, which bears an attribute
    version to indicate its version status.</p>

    <p>This element is formally defined as follows:</p>
<pre>
&lt;!ELEMENT dublinCore    - O  (title<br />
                             | author<br />
                             | otherAgent<br />
                             | publisher<br />
                             | date<br />
                             | subject<br />
                             | objectType<br />
                             | form<br />
                             | identifier<br />
                             | relation<br />
                             | source<br />
                             | language<br />
                             | coverage<br />
                             | metadata)*                       &gt;<br />
&lt;!ATTLIST dublinCore<br />
          version            CDATA               #IMPLIED       &gt;
</pre>

    <p>Several alternative methods have been proposed for defining
    the <em>scheme</em> and <em>type</em> attributes for various
    elements, in order to combine the virtues of a controlled
    vocabulary with the flexibility of an uncontrolled
    vocabulary:</p>

    <ul>
      <li>unrestricted values (as shown above), with suggested
      values given in the written documentation</li>

      <li>values restricted to particular schemes and types, with
      provision for simple modification of the DTD to enable other
      types or schemes</li>

      <li>provision of both a <em>scheme</em> and an
      <em>otherScheme</em> attribute, the first using controlled
      vocabular, the second accepting unrestricted values</li>
    </ul>

    <p>When this version of this document was prepared, no final
    consensus had been reached.</p>

    <h2><a id="sec4.0" name="sec4.0"></a>4 The Warwick Framework DTD
    fragment</h2>

    <p>This DTD, prepared by the authors, is intended to support
    the following three objectives:</p>

    <ul>
      <li>support for the Dublin core DTD as defined above</li>

      <li>support for structured generic metadata elements</li>

      <li>a framework within which these two can coexist</li>
    </ul>

    <h3><a id="sec4.1" name="sec4.1"></a>4.1 Containers and packages</h3>

    <p>A document conforming to this DTD is represented by a
    &lt;<em>container</em>&gt; element. Each
    &lt;<em>container</em>&gt; element consists of a sequence of
    one or more of the following package-level elements:</p>

    <ul>
      <li>
        dublinCore 

        <ul>
          <li>contains one or more of the metadata elements defined
          in the Dublin core</li>
        </ul>
      </li>

      <li>
        package 

        <ul>
          <li>contains one or more generic metadata or metagroup
          elements</li>
        </ul>
      </li>

      <li>
        packageRef 

        <ul>
          <li>a reference to some other package</li>
        </ul>
      </li>
    </ul>

    <p>Other package-level elements may be defined at a later date:
    to facilitate this, the contents of the &lt;container&gt;
    element are defined indirectly using a parameter entity (see
    DTD below).</p>

    <p>Package-level elements all share the following
    attributes:</p>

    <ul>
      <li>
        name 

        <ul>
          <li>human-readable name for the element</li>
        </ul>
      </li>

      <li>
        URI 

        <ul>
          <li>Universal Resource Indicator (?) referencing the
          element</li>
        </ul>
      </li>

      <li>
        version 

        <ul>
          <li>version number or name</li>
        </ul>
      </li>
    </ul>

    <p>Of these attributes, nameis required, while the other two
    are optional. All three have CDATA content. These elements and
    attributes are formally defined as follows:</p>
<pre>
&lt;!ENTITY % packageType 'package | dublinCore | packageRef'      &gt;<br />
<br />
&lt;!ELEMENT container     - O  (%packageType)*                    &gt;<br />
&lt;!ELEMENT package       - O  (metadata | metaGroup |<br />
                             %packageType)*                     &gt;<br />
&lt;!ATTLIST package<br />
          name               CDATA               #REQUIRED<br />
          URI                CDATA               #IMPLIED<br />
          version            CDATA               #IMPLIED       &gt;<br />
&lt;!ELEMENT packageRef    - O  EMPTY                              &gt;<br />
&lt;!ATTLIST packageRef<br />
          URI                CDATA               #IMPLIED<br />
          name               CDATA               #REQUIRED<br />
          version            CDATA               #IMPLIED       &gt;
</pre>

    <p><br />
    Note that a &lt;<em>package</em>&gt; may also contain nested
    &lt;<em>package</em>&gt;, &lt;<em>dublinCore</em>&gt; or
    &lt;<em>packageRef</em>&gt; elements. This allows considerable
    flexibility in structuring metadata.</p>

    <h3><a id="sec4.2" name="sec4.2"></a>4.2 Package components</h3>

    <p>The components of the &lt;<em>dublinCore</em>&gt; element
    were defined above in section <a href="#sec3.0">3 The Dublin Core
    DTD fragment</a>. The &lt;<em>package</em>&gt; element may
    contain a sequence of any number of the following
    sub-elements:</p>

    <ul>
      <li>
        metadata 

        <ul>
          <li>contains a single piece of metadata</li>
        </ul>
      </li>

      <li>
        metaGroup&gt; 

        <ul>
          <li>contains a group of &lt;<em>metadata</em>&gt; or
          nested &lt;<em>metaGroup</em>&gt; elements</li>
        </ul>
      </li>
    </ul>

    <p>The above elements all share the following attributes:</p>

    <ul>
      <li>
        type 

        <ul>
          <li>categorizes the metadata or metagroup</li>
        </ul>
      </li>

      <li>
        scheme 

        <ul>
          <li>references the authority or taxonomy within which
          this piece of metadata is defined</li>
        </ul>
      </li>

      <li>
        show 

        <ul>
          <li>indicates whether this metadata is visible (show),
          invisible (noshow), or inherits visibility from its
          immediate parent element (inherit).</li>
        </ul>
      </li>

      <li>
        sortKey 

        <ul>
          <li>optionally supplies a sort key or other normalized
          version of this piece of metadata.</li>
        </ul>
      </li>

      <li>
        index 

        <ul>
          <li>indicates whether this metadata should be indexed
          (index), not indexed (noindex), or should be treated in
          the same way as its immediate parent element
          (asparent).</li>
        </ul>
      </li>
    </ul>

    <p>These elements and attributes are formally defined as
    follows:</p>
<pre>
&lt;!ELEMENT metaGroup     - O  (#PCDATA | metadata | metaGroup)*  &gt;<br />
&lt;!ELEMENT metadata      - O  (#PCDATA | metadata)*              &gt;<br />
&lt;!ATTLIST metadata<br />
          type               CDATA               #REQUIRED<br />
          scheme             CDATA               'uncontrolled'<br />
          show               (show<br />
                             | noshow<br />
                             | inherit)          inherit<br />
          sortkey            CDATA               #IMPLIED<br />
          index              (index<br />
                             | noindex<br />
                             | asparent)         asparent       &gt;
</pre>

    <
    <!--#include virtual="/ssi/footer.shtml" -->
  </body>
</html>

